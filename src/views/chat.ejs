<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <style>
        .notification {
            color: gray;
            font-style: italic;
        }
    </style>
</head>
<body>

    <h1>Chat Room</h1>

    <div id="chat-container">
        <h3>Welcome, <%= username %>!</h3>
        <img src="<%= profilePicture %>" alt="Profile Picture" width="50" height="50">
        <div id="messages">
            <!-- Dynamically poplate messages -->
            <% messages.forEach(msg => { %>
                <div><strong><%= msg.sender %>:</strong> <%= msg.content %></div>
            <% }); %>
        </div>

        <!-- Typing Indicator -->
        <p id="typingIndicator" style="font-style: italic; color: gray;"></p>

        <input type="text" id="messageInput" placeholder="Type a message...">
        <button id="sendBtn">Send</button>
    </div>

    <h4>Active Users</h4>
    <ul id="activeUsers"></ul>

    <!-- Include Socket.io -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const input = document.getElementById("messageInput");
        const sendBtn = document.getElementById("sendBtn");
        const messagesList = document.getElementById("messages");
        const activeUsersList = document.getElementById("activeUsers");
        const typingIndicator = document.getElementById('typingIndicator');
        const username = "<%= username %>"; // Get the username from EJS
        let typingTimeout;

        // Notify server of user joining
        socket.emit("userJoined", username);

        sendBtn.addEventListener("click", () => {
            if (input.value.trim()) {
                socket.emit("chatMessage", { sender: username, content: input.value });
                console.log(username, input.value);
                input.value = "";
            }
        });


        socket.on("message", (msg) => {
            displayMessage(msg);
        });

        function displayMessage(msg) {
            const chatBox = document.getElementById("messages");
            const messageElement = document.createElement("div");
            messageElement.innerHTML = `<strong>${msg.sender}:</strong> ${msg.content}`;
            chatBox.appendChild(messageElement);
        }

        // Receive active users list
        socket.on("updateActiveUsers", (users) => {
            activeUsersList.innerHTML = ""; // Clear the list
            users.forEach(user => {
                const li = document.createElement("li");
                li.textContent = user;
                activeUsersList.appendChild(li);
            });
        });

        // Show notification when a user joins
        socket.on("userJoinedNotification", (message) => {
            displayNotification(message);
        });

        // Show notification when a user leaves
        socket.on("userLeftNotification", (message) => {
            displayNotification(message);
        });

        function displayNotification(message) {
            const chatBox = document.getElementById("messages");
            const notificationElement = document.createElement("div");
            notificationElement.classList.add("notification");
            notificationElement.textContent = message;
            chatBox.appendChild(notificationElement);
        }

        // Emit event when user starts typing
        messageInput.addEventListener('input', () => {
            socket.emit('typing', { username }); // Send username to server

            // Clear the timeout if user continues typing
            clearTimeout(typingTimeout);

            // After 2 seconds of inactivity, stop showing "typing..."
            typingTimeout = setTimeout(() => {
                socket.emit('stopTyping', { username });
            }, 2000);
        });

        // Listen for typing event
        socket.on('userTyping', (typingUsers) => {
            // typingIndicator.innerText = `${username} is typing...`;
            if (typingUsers.length === 0) {
                typingIndicator.innerText = "";
            } else if (typingUsers.length === 1) {
                typingIndicator.innerText = `${typingUsers[0]} is typing...`;
            } else {
                typingIndicator.innerText = `${typingUsers.join(", ")} are typing...`;
            }
        });

        // Listen for stopTyping event
        socket.on('userStoppedTyping', () => {
            typingIndicator.innerText = ''; // Clear the typing indicator
        });

    </script>
</body>
</html>
