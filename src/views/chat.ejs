<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/chat.css">
</head>
<body class="d-flex flex-column vh-100">

    <!-- Navbar -->
    <nav class="navbar navbar-light bg-light shadow-sm">
        <div class="container">
            <a class="navbar-brand fw-bold fs-4 text-primary" href="#">ChatterUp</a>
        </div>
    </nav>

    <!-- Chat Container -->
    <div class="container-fluid flex-grow-1 d-flex">
        
        <!-- Active Users List -->
        <div class="col-md-3 bg-light border-end p-3" id="activeUsers">
            <h5 class="text-center text-primary">Active Users</h5>
            <div class="user-list">
                <div class="user-item d-flex align-items-center p-2 border-bottom">
                    <img src="/uploads/default-profile.jpg" class="rounded-circle me-2" width="40" alt="User">
                    <span>John Doe</span>
                </div>
                <!-- Dynamically generated users will be added here -->
            </div>
        </div>

        <!-- Chat Window -->
        <div class="col-md-9 d-flex flex-column">
            
            <!-- Chat Header -->
            <div class="chat-header bg-primary text-white p-3">
                <h5 class="mb-0">Chat Room</h5>
            </div>

            <!-- Messages -->
            <div class="chat-messages flex-grow-1 p-3 overflow-auto" id="messages">
                <% messages.forEach(msg => { %>
                    <div class="d-flex align-items-center mb-2">
                        <img src="<%= profilePicture %>" class="rounded-circle me-2" width="40" alt="User">
                        <div>
                            <strong><%= msg.sender %>:</strong>
                            <div class="message-content bg-light p-2 rounded"><%= msg.content %></div>
                        </div>
                    </div>
                <% }); %>
                <p id="typingIndicator" class="text-muted"></p>
            </div>

            <!-- Message Input -->
            <div class="input-container p-3 bg-light d-flex">
                <input type="text" id="messageInput" class="form-control me-2" placeholder="Type a message...">
                <button id="sendBtn" class="btn btn-primary">Send</button>
            </div>

        </div>
    </div>

    <!-- Footer -->
    <footer class="footer bg-light text-center p-2">
        <p class="mb-0">Â© 2025 ChatterUp. All rights reserved.</p>
    </footer>

    <!-- Script tags -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const input = document.getElementById("messageInput");
        const sendBtn = document.getElementById("sendBtn");
        const messagesList = document.getElementById("messages");
        const activeUsersList = document.getElementById("activeUsers");
        const typingIndicator = document.getElementById('typingIndicator');
        const username = "<%= username %>"; 
        const profilePicture = "<%= profilePicture %>"; 
        let typingTimeout;

        socket.emit("userJoined", username);

        sendBtn.addEventListener("click", () => {
            if (input.value.trim()) {
                socket.emit("chatMessage", { sender: username, content: input.value });
                input.value = "";
            }
        });

        socket.on("message", (msg) => {
            displayMessage(msg);
        });

        function displayMessage(msg) {
            const messageElement = document.createElement("div");
            messageElement.classList.add("d-flex", "align-items-center", "mb-2");
            messageElement.innerHTML = `
                <img src=${profilePicture} class="rounded-circle me-2" width="40" alt="User">
                <div>
                    <strong>${msg.sender}:</strong>
                    <div class="message-content bg-light p-2 rounded">${msg.content}</div>
                </div>
            `;
            messagesList.appendChild(messageElement);
            messagesList.scrollTop = messagesList.scrollHeight;
        }

        socket.on("updateActiveUsers", (users) => {
            activeUsersList.innerHTML = `<h5 class="text-center text-primary">Active Users</h5>`;
            users.forEach(user => {
                const userElement = document.createElement("div");
                userElement.classList.add("user-item", "d-flex", "align-items-center", "p-2", "border-bottom");
                userElement.innerHTML = `
                    <img src=${profilePicture} class="rounded-circle me-2" width="40" alt="User">
                    <span>${user}</span>
                `;
                activeUsersList.appendChild(userElement);
            });
        });

        socket.on("userJoinedNotification", (message) => {
            displayNotification(message);
        });

        socket.on("userLeftNotification", (message) => {
            displayNotification(message);
        });

        function displayNotification(message) {
            const notificationElement = document.createElement("div");
            notificationElement.classList.add("text-muted", "text-center");
            notificationElement.textContent = message;
            messagesList.appendChild(notificationElement);
        }

        messageInput.addEventListener('input', () => {
            socket.emit('typing', { username });
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                socket.emit('stopTyping', { username });
            }, 2000);
        });

        socket.on('userTyping', (typingUsers) => {
            typingIndicator.innerText = typingUsers.length > 0 
                ? `${typingUsers.join(", ")} ${typingUsers.length > 1 ? "are" : "is"} typing...` 
                : "";
        });

        socket.on('userStoppedTyping', () => {
            typingIndicator.innerText = '';
        });

    </script>
</body>
</html>
